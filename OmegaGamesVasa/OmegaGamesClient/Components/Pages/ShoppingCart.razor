@page "/ShoppingCart"
@using OmegaGamesAPI.Services
@using Common.DTO
@using System.Runtime.InteropServices
@rendermode InteractiveServer
@inject CustomerService customerService
@inject NavigationManager NavigationManager

<div class="text-center">
    <h3>ShoppingCart</h3>
</div>


@if (message != null)
{
    <p>@message</p>
}
else
{
    <div class="container text-center">
        <div class="row">
            <Virtualize Items="Products" Context="Products">
                <div class="col-md-3 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <label>Product Name</label>
                            <h5 class="card-title">@Products.ProductName</h5>
                            <label>Product Description</label>
                            <p class="card-text">@Products.Description</p>
                            <label>Price</label>
                            <p class="card-text">@Products.Price</p>
                            <label>Category</label>
                            <p class="card-text">@Products.Category</p>
                            <button type="button" class="btn btn-primary" @onclick="() => RemoveFromCart(Products)">Ta bort från kundvagn</button>
                        </div>
                    </div>
                </div>
            </Virtualize>
        </div>
    </div>
}

<div class="text-center">
    <label>Cart total</label>
    <textbox disabled="true">
@foreach (var prod in Products)
{
price += prod.Price;
}
@price
</textbox>
</div>
    <div class="text-center">
    <button type="button" class="btn btn-primary" @onclick="() => ClearCart()">Clear Cart</button>
    <button type="button" class="btn btn-primary" @onclick="() => GotoCheck()">Go to checkout</button>
</div>

@code {
    private List<ProductDTO> Products { get; set; } = new List<ProductDTO>();

    private string message;

    private double price;

    protected override async Task OnInitializedAsync()
    {
        if (customerService.Customer.Cart.Count == 0)
        {
            message = "Your cart is empty";
        }
        else
        {
            Products.AddRange(await customerService.GetShoppingCart());
        }
    }

    private async Task RemoveFromCart(ProductDTO product)
    {
        await customerService.RemoveFromCart(product);
        Products.Clear();
        Products.AddRange(await customerService.GetShoppingCart());

        if (customerService.Customer.Cart.Count == 0)
        {
            message = "Your cart is empty";
        }

    }

    private async Task ClearCart()
    {
        await customerService.ClearCart();
        Products.Clear();
        price = 0;
        message = "Your cart is empty";
    }

    private void GotoCheck()
    {
        NavigationManager.NavigateTo("/OrderPage");
    }
}