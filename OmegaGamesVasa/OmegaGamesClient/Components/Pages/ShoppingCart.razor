@page "/ShoppingCart"
@using OmegaGamesAPI.Services
@using Common.DTO
@using System.Runtime.InteropServices
@using OmegaGamesClient.Components.Account.Pages
@rendermode InteractiveServer
@inject CustomerService customerService
@inject NavigationManager NavigationManager


<div class="shopping-cart-image">
</div>

@if (message != null)
{
    <p>@message</p>

}
else
{
    <div class="container text-center product-container">
        <div class="row justify-content-center mb-5 mt-5">
            @foreach (var Product in Products.DistinctBy(p => p.Id))
            {
                <div class="card shadow-sm col-md-3 col-sm-6 m-2 product-card">
                    <img class="card-img-top" src="@Product.Image" alt="@Product.ProductName">
                    <div class="card-body">
                        <h4 class="card-title">@Product.ProductName</h4>
                        <div class="card-text product-price">@Product.Price kr</div>
                    </div>
                    <div class="card-footer">
                        <label>Amount</label>
                        <div class="input-group">
                            <button class="btn btn-primary btn-outline-secondary" type="button" @onclick="() => IncrementAmount(Product)">+</button>
                            <textarea class="amount-box" disabled="true">@Products.Count(p => p.Id == Product.Id)</textarea>
                            <button class="btn btn-primary btn-outline-secondary" type="button" @onclick="() => DecrementAmount(Product)">-</button>
                        </div>
                        <button type="button" class="btn btn-primary" @onclick="() => RemoveAllFromCart(Product)">Ta bort från kundvagn</button>
                    </div>
                </div>
            }
        </div>
        <div class="justify-content-center mt-5">
            <div class="text-center pt-5">
                <label>Cart total</label>
                <textbox disabled="true">
                    @Math.Round(@price, 2)
                </textbox>
            </div>
            <div class="row text-center mb-5">
                <button type="button" class="btn btn-primary" @onclick="() => ClearCart()">Clear Cart</button>
                <button type="button" class="btn btn-primary" @onclick="() => GotoCheck()">Go to checkout</button>
            </div>
        </div>
    </div>

}


@code {
    private List<ProductDTO> Products { get; set; } = new();

    private string message;

    private double price;

    protected override async Task OnInitializedAsync()
    {
        Products.Clear();
        if (customerService.Customer.Cart.Count == 0)
        {
            message = "Your cart is empty";
        }
        else
        {
            Products.AddRange(await customerService.GetShoppingCart());

        }
        CalculateTotalCost();
    }

    private async Task DecrementAmount(ProductDTO product)
    {
        await RemoveOneFromCart(product);
    }

    private async Task IncrementAmount(ProductDTO product)
    {
        await UpdateCart(product);
    }

    private async Task UpdateCart(ProductDTO product)
    {
        await customerService.AddToCart(product);
        Products.Clear();
        Products.AddRange(await customerService.GetShoppingCart());
        CalculateTotalCost();
    }

    private async Task RemoveAllFromCart(ProductDTO product)
    {
        while (Products.Exists(p => p.Id == product.Id))
        {
            await customerService.RemoveFromCart(product);
            Products.Remove(product);
        }
        Products.Clear();
        Products.AddRange(await customerService.GetShoppingCart());
        CalculateTotalCost();

        if (customerService.Customer.Cart.Count == 0)
        {
            message = "Your cart is empty";
            price = 0;
        }
    }

    private async Task RemoveOneFromCart(ProductDTO product)
    {
        await customerService.RemoveFromCart(product);
        Products.Clear();
        Products.AddRange(await customerService.GetShoppingCart());
        CalculateTotalCost();

        if (customerService.Customer.Cart.Count == 0)
        {
            message = "Your cart is empty";
            price = 0;
        }
    }

    private void CalculateTotalCost()
    {
        price = Products.Sum(item => item.Price);
    }

    private async Task ClearCart()
    {
        await customerService.ClearCart();
        Products.Clear();
        price = 0;
        message = "Your cart is empty";
    }

    private void GotoCheck()
    {
        NavigationManager.NavigateTo("/OrderPage");
    }
}