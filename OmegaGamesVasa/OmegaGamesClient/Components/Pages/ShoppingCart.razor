@page "/ShoppingCart"
@using OmegaGamesAPI.Services
@using Common.DTO
@using System.Runtime.InteropServices
@rendermode InteractiveServer
@inject CustomerService customerService
@inject NavigationManager NavigationManager


<div class="shopping-cart-image">
    
</div>

@if (message != null)
{
    <p>@message</p>

}
else
{
<div class="container text-center product-container">
    <div class="row justify-content-center">
        @foreach (var Product in ProductsInCart)
        {
            <div class="card btn shadow-sm col-md-3 col-sm-6 m-2 product-card">
                <img class="card-img-top" src="@Product.Image" alt="@Product.ProductName">
                <div class="card-body">
                    <h4 class="card-title">@Product.ProductName</h4>      
                    <div class="card-text">@Product.Price kr</div>
                </div>
                <div class="card-footer">
                    <label>Amount</label>
                    <div class="input-group">
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => IncrementAmount(Product)">+</button>
                        <input type="number" class="form-control" @bind="Product.Amount" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => DecrementAmount(Product)">-</button>
                    </div>
                    <button type="button" class="btn btn-primary" @onclick="() => RemoveAllFromCart(Product)">Ta bort från kundvagn</button>
                </div>
            </div>
        }        
    </div>
        <div class="mt-4 fixed-bottom">
            <div class="text-center">
                <label>Cart total</label>
                <textbox disabled="true">

                    @Math.Round(@price, 2)
                </textbox>
            </div>
            <div class="text-center">
                <button type="button" class="btn btn-primary" @onclick="() => ClearCart()">Clear Cart</button>
                <button type="button" class="btn btn-primary" @onclick="() => GotoCheck()">Go to checkout</button>
            </div>
        </div>
</div>
   
}



@* @if (message != null)
{
    <p>@message</p>
}
else
{
    <div class="container text-center mt-4 d-flex justify-content-center"> 
        <div class="row">    
            <Virtualize Items="ProductsInCart" Context="Products">
                <div class="col-md-3 mb-4 col-sm-6 m-1">
                    <div class="card btn shadow-sm product-card">
                        <img class="card-img-top" src="@Products.Image"/>
                        <div class="card-body">         
                            <h5 class="card-title">@Products.ProductName</h5>
                            <label>Price</label>
                            <p class="card-text">@Math.Round(Products.Price,2)</p>
                            <label>Amount</label>
                            <div class="input-group mb-3">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => IncrementAmount(Products)">+</button>
                                <input type="number" class="form-control" @bind="Products.Amount" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => DecrementAmount(Products)">-</button>
                            </div>
                            <button type="button" class="btn btn-primary" @onclick="() => RemoveAllFromCart(Products)">Ta bort från kundvagn</button>
                        </div>
                    </div>
                </div>
            </Virtualize>
        </div>
    </div>
} *@



@code {
    private List<ProductDTO> Products { get; set; } = new();
    private List<ProductInCartDTO> ProductsInCart { get; set; } = new();



    private string message;

    private double price;

    protected override async Task OnInitializedAsync()
    {

        if (customerService.Customer.Cart.Count == 0)
        {
            message = "Your cart is empty";
        }
        else
        {
            ProductsInCart.Clear();
            Products.AddRange(await customerService.GetShoppingCart());

            ConvertProductsToProductsInCart();
        }
        CalculateTotalCost();
    }

    private async Task DecrementAmount(ProductInCartDTO product)
    {
        product.Amount--;
        await RemoveOneFromCart(product);
    }

    private async Task IncrementAmount(ProductInCartDTO product)
    {
        product.Amount++;
        await UpdateCart(product);
    }

    private async Task UpdateCart(ProductInCartDTO product)
    {
        var foundProduct = Products.FirstOrDefault(p => p.Id == product.Id);
        await customerService.AddToCart(foundProduct);
        Products.Clear();
        Products.AddRange(await customerService.GetShoppingCart());
        ConvertProductsToProductsInCart();
        CalculateTotalCost();
    }

    private async Task RemoveAllFromCart(ProductInCartDTO product)
    {
        var foundProduct = Products.FirstOrDefault(p => p.Id == product.Id);
        while (Products.Exists(p => p.Id == product.Id))
        {
            await customerService.RemoveFromCart(foundProduct);
            Products.Remove(foundProduct);
        }
        Products.Clear();
        Products.AddRange(await customerService.GetShoppingCart());
        ConvertProductsToProductsInCart();
        CalculateTotalCost();
        //TODO: Kanske behöver vara await + metoden en Task

        if (customerService.Customer.Cart.Count == 0)
        {
            message = "Your cart is empty";
            price = 0;
        }
    }

    private async Task RemoveOneFromCart(ProductInCartDTO product)
    {
        var foundProduct = Products.FirstOrDefault(p => p.Id == product.Id);
        await customerService.RemoveFromCart(foundProduct);
        Products.Clear();
        Products.AddRange(await customerService.GetShoppingCart());
        ConvertProductsToProductsInCart();
        CalculateTotalCost();

        if (customerService.Customer.Cart.Count == 0)
        {
            message = "Your cart is empty";
            price = 0;
        }
    }

    private void CalculateTotalCost()
    {
        price = ProductsInCart.Sum(item => item.Price * item.Amount);
    }

    private async Task ClearCart()
    {
        await customerService.ClearCart();
        Products.Clear();
        price = 0;
        message = "Your cart is empty";
    }

    private void GotoCheck()
    {
        NavigationManager.NavigateTo("/OrderPage");
    }

    private void ConvertProductsToProductsInCart()
    {
        ProductsInCart.Clear();

        foreach (var product in Products)
        {
            if (ProductsInCart.Exists(p => p.Id == product.Id))
            {
                var foundProduct = ProductsInCart.FirstOrDefault(p => p.Id == product.Id);
                foundProduct.Amount++;
            }
            else
            {
                var newProduct = new ProductInCartDTO()
                    {
                        AgeRestriction = product.AgeRestriction,
                        Amount = 1,
                        Category = product.Category,
                        Description = product.Description,
                        Genre = product.Genre,
                        Id = product.Id,
                        Image = product.Image,
                        Price = product.Price,
                        ProductName = product.ProductName
                    };
                ProductsInCart.Add(newProduct);
            }
        }
    }
}