@page "/Orders"
@using OmegaGamesAPI.Services
@using Common.DTO
@using Common.Interface
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IOrderRepository<OrderDTO> OrderService

@attribute [Authorize(Roles = "Admin")]

<div class="page-image"></div>

<div class="container product-container">
    <ul class="list-group mt-5">
        <h3 class="d-flex justify-content-center text-light">All Orders</h3>
        @foreach (var order in AllOrders)
        {
            <div class="card mt-1 card-opacity order-card">
                <div class="d-flex row card-body text-center justify-content-between align-items-center">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4 align-items-center">
                        <h6 style="margin: 0;">Kundnummer: @order.CustomerId</h6>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4 align-items-center">
                        <h6>Ordernummer: @order.Id</h6>
                    </div>
                    <div class="col-lg-1 col-md-4 col-sm-4 col-xs-4 align-items-center">
                        @if (order.OrderStatus == "ORDER_CREATED")
                        {
                            <span class="badge bg-warning text-dark">Skapad</span>
                        }
                        else if (order.OrderStatus == "ORDER_CONFIRMED")
                        {
                            <span class="badge bg-success">Betalad</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Ingen status</span>
                        }
                    </div>
                    <div class="col-lg-3 col-md-12 col-sm-12 col-xs-12">
                        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="@($"#collapseExample_{order.Id}")" aria-expanded="false" aria-controls="collapseExample">
                            Orderdetaljer
                        </button>
                    </div>
                    
                </div>
                <div class="collapse" id="@($"collapseExample_{order.Id}")">
                    <ul class="card-body border-top">

                        <div class="d-flex row mb-3">
                            <h5>Kundinformation</h5>

                            <span>Beställare: @order.CustomerFirstName @order.CustomerLastName</span>
                            <span>Email: @order.CustomerEmail</span>
                            <span>Mobilnummer: @order.CustomerPhone</span>
                            <span>Leveransadress: @order.CustomerAddress</span>
                        </div>

                        @foreach (var product in order.CustomerCart.DistinctBy(p => p.Id))
                        {
                            <li class="d-flex list-group-item">
                                <div class="col">
                                    @product.ProductName
                                </div>
                                <div class="col text-center">
                                    Antal: @order.CustomerCart.Count(p => p.Id == product.Id)
                                </div>
                                <div class="col text-end">
                                    @product.Price kr
                                </div>
                            </li>
                        }
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Leveranssätt:</span>
                            <span>Digital kod</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Summa:</span>
                            <strong>@order.CustomerCart.Sum(p => p.Price) kr</strong>
                        </li>
                    </ul>
                </div>
                <div class="card-footer text-muted text-center">
                    Orderdatum: @order.OrderDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                </div>
            </div>
        }
    </ul>
</div>





@code {
    public List<OrderDTO> AllOrders { get; set; } = new();

    override protected async Task OnInitializedAsync()
    {
        var orders = await OrderService.GetAllOrders();
        var sortedOrders = orders.OrderByDescending(o => o.OrderDate).ToList();
        AllOrders.AddRange(sortedOrders);
    }

}