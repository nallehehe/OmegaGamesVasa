@page "/Checkout"
@using OmegaGamesAPI.Services
@using OmegaGamesClient.Services;
@using Common.Interface;
@using Common.DTO
@using System.ComponentModel.DataAnnotations
@using OmegaGamesClient.Components.Account.Pages.Manage
@inject CustomerService customerService
@inject OrderService orderService
@inject ICheckoutService klarnaCheckoutService;
@rendermode InteractiveServer


<div class="shopping-cart-image">
</div>
<section class="h-100 h-custom checkout-opacity pt-5">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12">
                <div class="card card-registration card-registration-2" style="border-radius: 15px;">
                    <div class="card-body p-0">
                        <div class="row g-0">
                            <div class="col-lg-8">
                                <div class="p-5">
                                    <div class="d-flex justify-content-between align-items-center mb-5">
                                        <h1 class="fw-bold mb-0 text-black">Kundvagn</h1>
                                    </div>
                                    <hr class="my-4">
                                    @if (message != null)
                                    {
                                        <h2>@message</h2>
                                    } else if (klarnaHtmlSnippet != null)
                                    {
                                        @klarnaHtmlSnippet
                                    }
                                    else
                                    {
                                        @foreach (var product in Products.DistinctBy(p => p.Id))
                                        {
                                            <div class="row mb-4 d-flex justify-content-between align-items-center product-in-cart">
                                                <div class="col-md-2 col-lg-2 col-xl-2">
                                                    <img src="@product.Image"
                                                         class="img-fluid rounded-3" alt="Product image">
                                                </div>
                                                <div class="col-md-3 col-lg-3 col-xl-3">
                                                    <h6 class="text-muted">@product.ProductName</h6>
                                                    <h6 class="text-black mb-0">@product.Category</h6>
                                                </div>

                                                <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
                                                    <h6 class="mb-0">@product.Price kr</h6>
                                                </div>
                                                <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
                                                    <h6 class="mb-0 product-amount">x @Products.Count(p => p.Id == product.Id)</h6>
                                                </div>
                                                <div class="col-md-1 col-lg-1 col-xl-1 text-end">
                                                    <a href="#!" class="text-muted"><i class="fas fa-times"></i></a>
                                                </div>
                                            </div>
                                        }
                                    }
                                    <hr class="my-4">
                                    <div class="d-flex justify-content-between mb-5">
                                        <h5 class="text-uppercase">Totalt pris</h5>
                                        <h5 class="total-price"><span>@price</span> kr</h5>
                                    </div>
                                    <div class="pt-5">
                                        <h6 class="mb-0">
                                            <a href="/ProductPage" class="text-body">
                                                <i class="fas fa-long-arrow-alt-left me-2"></i>Fortsätt handla
                                            </a>
                                        </h6>
                                    </div>
                                    
                                </div>
                            </div>
                            <div class="col-lg-4 bg-grey">
                                <div class="p-5">
                                    <h3 class="fw-bold mb-5 mt-2 pt-1" id="checkout-header">Lägg till leveransdetaljer</h3>
                                    <EditForm Model="newCustomer" OnValidSubmit="SendOrderToKlarna">
                                        <DataAnnotationsValidator/>
                                        <label for="FirstName">Förnamn:</label>
                                        <InputText id="FirstName" @bind-Value="newCustomer.FirstName" class="form-control"/>
                                        <ValidationMessage id="first-name-validation" For="@(() => newCustomer.FirstName)"/>

                                        <label for="LastName">Efternamn:</label>
                                        <InputText id="LastName" @bind-Value="newCustomer.LastName" class="form-control"/>
                                        <ValidationMessage id="last-name-validation" For="@(() => newCustomer.LastName)"/>

@*                                         <label for="Address">Address:</label>
                                        <InputText id="Address" @bind-Value="newCustomer.Address" class="form-control"/>
                                        <ValidationMessage For="@(() => newCustomer.Address)"/>

                                        <label for="ZipCode">Postnummer:</label>
                                        <InputText id="ZipCode" @bind-Value="newCustomer.ZipCode" class="form-control"/>
                                        <ValidationMessage For="@(() => newCustomer.ZipCode)"/>

                                        <label for="City">Stad:</label>
                                        <InputText id="City" @bind-Value="newCustomer.City" class="form-control"/>
                                        <ValidationMessage For="@(() => newCustomer.City)"/>

                                        <label for="Country">Land:</label>
                                        <InputText id="Country" @bind-Value="newCustomer.Country" class="form-control"/>
                                        <ValidationMessage For="@(() => newCustomer.Country)"/> *@

                                        <label for="Email">Email:</label>
                                        <InputText id="Email" @bind-Value="newCustomer.Email" class="form-control"/>
                                        <ValidationMessage id="email-validation" For="@(() => newCustomer.Email)"/>
                                        
                                        <label for="VerifiedEmailAddress">Validera Email:</label>
                                        <InputText id="EmailVali" @bind-Value="newCustomer.VerifiedEmailAddress" class="form-control" />
                                        <ValidationMessage id="email-confirm-validation" For="@(() => newCustomer.VerifiedEmailAddress)"/>

                                        <label for="Phone">Telefonnummer:</label>
                                        <InputText id="Phone" @bind-Value="newCustomer.Phone" class="form-control"/>
                                        <ValidationMessage id="phone-validation" For="@(() => newCustomer.Phone)"/>
                                        @if (errorMessage != null)
                                        {
                                            <div class="alert alert-danger mt-4" role="alert">
                                                @errorMessage
                                            </div>
                                        }
                                        @if (successMessage != null)
                                         {
                                             <div class="alert alert-success mt-4" role="alert">
                                                 @successMessage
                                             </div>
                                         }
                                        <button type="submit" class="btn btn-primary mt-4 submit-button" disabled=@(isSubmitting || externalCheckoutInProgress)>
                                            @if (isSubmitting)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status"  aria-hidden="true"></span>
                                                <span>Slutför köp</span>
                                            }
                                            else
                                            {
                                                <span>Slutför köp</span>
                                            }
                                        </button>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private List<ProductInCartDTO> Products { get; set; } = new();
    private CustomerDTO? newCustomer { get; set; }
    private string? message;
    private string? errorMessage;
    private string? successMessage;
    private double price;
    private bool isSubmitting = false;
    private bool addSuccess = false;
    private bool externalCheckoutInProgress = false;
    private MarkupString? klarnaHtmlSnippet = null;

    protected override void OnInitialized()
    {
        newCustomer = customerService.Customer;
        Products = customerService.Customer.Cart;
        CalculateTotalCost();
    }

    private void AddCustomer()
    {

    }
    private void CalculateTotalCost()
    {
        price = Products.Sum(item => item.Price);
    }

    private async void SendOrderToKlarna()
    {
        errorMessage = null;

        var newOrder = new OrderDTO()
            {
                CustomerFirstName = newCustomer.FirstName,
                CustomerLastName = newCustomer.LastName,
                CustomerEmail = newCustomer.Email,
                CustomerPhone = newCustomer.Phone,
                CustomerCart = Products,
                TotalPrice = price,
                OrderDate = DateTime.UtcNow,

                CustomerAddress = "Dummy address",
                CustomerId = 0,
                OrderStatus = "ORDER_CREATED"
            };
        isSubmitting = true;
        var klarnaOrderDTO = await klarnaCheckoutService.CreateOrder(newOrder);
        var klarnaSuccess = klarnaOrderDTO != null;
        if (!klarnaSuccess || klarnaOrderDTO == null)
        {
            errorMessage = "Din order gick inte igenom!";
            isSubmitting = false;
            await InvokeAsync(StateHasChanged);
            return;
        } else
        {
            newOrder.ExternalRef = klarnaOrderDTO.order_id;
            addSuccess = await orderService.AddOrderAsync(newOrder) != null;
            if (!addSuccess)
            {
                errorMessage = "Din order gick inte igenom!";
                await InvokeAsync(StateHasChanged);
                return;
            }
            klarnaHtmlSnippet = new MarkupString(klarnaOrderDTO.html_snippet);
            isSubmitting = false;
            externalCheckoutInProgress = true;
        }
        await InvokeAsync(StateHasChanged);
    }
}